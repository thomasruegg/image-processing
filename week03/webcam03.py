#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Webcam solution for lab 02

Average over N noisy images

@author: Patrik MÃ¼ller
@date:   07.08.2020
"""

import sys

import cv2
import numpy as np

sys.path.append("../..")
from utilities.webcam_control import Webcam

# Parameter
N = 10
settings = {
    "frame_width": 2048,
    "frame_height": 1536,
    "exposure": -4,
    "gain": 0,
}  # manual camera settings
# settings_file = 'settings.txt'  # file name with settings
# (generated by 'get_settings.py')

base = 10
gamma = 0.5
p = np.array([[0, 0], [100, 30], [200, 220], [255, 255]])

r = np.arange(256)
scaleLog = 255 / np.log(255) / np.log(base)

# T = np.array(np.flip(r), dtype='uint8') # Negative
# T = scaleLog*np.log(1+r)/np.log(base) # log
# T = base**(r/scaleLog)-1 # inverse log
# T = 255**(1-1/base)*r**(1/base) # nth root
# T = (255**(1/base-1)*r)**base # nth power


T = 255 ** (1 - gamma) * r ** gamma  # gamma, "255 ** (1 - gamma)" = constant, can also be like 12 or whatever

# T = np.zeros(256) # piecewise linear
# for k in range(p.shape[0]-1):
# 	xx = range(p[k,0],p[k+1,0]+1)
# 	T[xx] = p[k,1] + (xx-p[k,0])*(p[k+1,1]-p[k,1])/(p[k+1,0]-p[k,0])

# T = r.copy() # Random transformation
# np.random.shuffle(T)

# T = 255*(0.5-0.5*np.cos(2*np.pi*r/255)) # Hann

T = np.array(T, dtype="uint8")

downsampling_factor = 1  # downsampling factor

# Open video stream
camera = Webcam(port=0, settings=settings, downscale=downsampling_factor)

print("Stream from camera")
while 1:
    # %% Get frames
    # Capture frame-by-frame
    ret, frame = camera.get_frame()
    if not ret:
        break

    # %% Pre-processing
    f = np.mean(frame, -1)  # Convert to grayscale
    # f = np.rot90(f, k=2)  # rotate image by 180 degrees
    f = f.astype("uint8")  # Convert to uint8

    # Image Processing
    g = T[f]

    # %% Update visualization
    # Display the resulting frame
    cv2.imshow("Original", f)
    cv2.imshow("Tranformed", g)

# When everything done, release the video stream
camera.close()
print("Closed camera")
