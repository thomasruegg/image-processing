#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Webcam solution for lab 02

Average over N noisy images

@author: Patrik MÃ¼ller
@date:   07.08.2020
"""

import sys

import cv2
import numpy as np

sys.path.append("../..")
from utilities.webcam_control import Webcam

# Parameter
N = 10
settings = {
    "frame_width": 2048,
    "frame_height": 1536,
    "exposure": -4,
    "gain": 0,
}  # manual camera settings
# settings = 'settings.txt'  # file name with settings
# (generated by 'get_settings.py')

downsampling_factor = 1  # downsampling factor (increases speed, but data is lost)

# Open video stream
camera = Webcam(port=0, settings=settings, downscale=downsampling_factor)

# Initialize image buffer
ret, frame = camera.get_frame()
idx = 0
img_buffer = np.zeros(frame.shape[:-1] + (N,), dtype="uint8")

print("Stream from camera")
while 1:
    # %% Get frames
    # Capture frame-by-frame
    ret, frame = camera.get_frame()
    if not ret:
        break

    # %% Pre-processing
    f = np.mean(frame, -1)  # Convert to grayscale
    # f = np.rot90(f, k=2)  # rotate image by 180 degrees
    f = f.astype("uint8")  # Convert to uint8

    # %% Image processing
    img_buffer[:, :, idx] = f
    idx = np.mod(idx + 1, N)
    g = np.array(np.mean(img_buffer, -1), dtype="uint8")

    # %% Update visualization
    # Display the resulting frame
    cv2.imshow("Press 'q' or 'Esc' to close window", f)
    cv2.imshow("Filtered", g)

# When everything done, release the video stream
camera.close()
print("Closed camera")
