#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Webcam solution for lab 04

Apply histogram equalization to video stream

@author: Patrik MÃ¼ller
@date:   07.08.2020
"""

import sys

import cv2
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

sys.path.append("../..")
from utilities.webcam_control import Webcam

matplotlib.use("Qt5agg")

# Parameter
exit_flag = 0
settings = {
    "frame_width": 2048,
    "frame_height": 1536,
    "exposure": -4,
    "gain": 0,
}  # manual camera settings
# settings_file = 'settings.txt'  # file name with settings
# (generated by 'get_settings.py')

downsampling_factor = 1  # downsampling factor (increases speed, but data is lost)

# Open video stream
camera = Webcam(port=0, settings=settings, downscale=downsampling_factor)

# Prepare histograms
x = np.arange(257) - 0.5
graylevels = np.arange(256)
T1 = np.zeros_like(graylevels)
T2 = np.zeros_like(graylevels)
fig, ax = plt.subplots(num=1, clear=True, constrained_layout=True)
p = ax.plot(*(4 * [graylevels]))
ax.legend([r"$T_1$", r"$T_2$"])
ax.grid(1)

fig.canvas.mpl_connect("close_event", camera.stop_camera)

print("Stream from camera")
while 1:
    # %% Get frames
    # Capture frame-by-frame
    ret, frame = camera.get_frame()
    if not ret or exit_flag:
        break

    # %% Pre-processing
    f = np.mean(frame, -1)  # Convert to grayscale
    # f = np.rot90(f, k=2)  # rotate image by 180 degrees
    f = f.astype("uint8")  # Convert to uint8

    # %% Image processing
    # TODO calculate histogram equalization vector of f -> T1

    g = f.copy()
    # TODO apply histogram equalization to f -> g

    # TODO calculate histogram equalization vector of g -> T2

    # %% Update visualization
    # Display the resulting frame
    cv2.imshow("Original", f)
    cv2.imshow("Equalized", g)
    # Display the histograms
    p[0].set_ydata(T1)
    p[1].set_ydata(T2)
    fig.canvas.draw_idle()
    fig.canvas.start_event_loop(0.001)

# When everything done, release the video stream
camera.close()
plt.close(fig)
print("Closed camera")
